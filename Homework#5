Operating System HW#5
2016116790 이 진우

1.개요
① 과제
- 아두이노 키트의 led, 저항을 사용하여 led제어하는 디바이스 프로그램을 만든다.. 
- User 프로그램에서 입력을 받아서 3초간 LED가 깜빡이는 코드 와 led의 상태를 바꿔주는 코드를 실행시킨다. 
- user mode 와 kernel mode에서 장치를 제어하는 프로그래밍을 한다
② 과제
- 아두이노 키트의 led, 저항, 스위치를 사용하여 led 제어하는 디바이스 프로그램을 만든다.
- switch 누르고 있으면 led가 켜지고 switch를 떼면 led가 꺼진다.
- user mode 와 kernel mode에서 장치를 제어하는 프로그래밍을 한다
2.프로그램 구조 설명
	함수에 대한 설명
	int open(struct inode*,struct file *): 응용 프로그램에서 장치파일을 int open system call을 호출해서 열 때, 커널이 호출하는 함수이다. 즉 장치 파일을 열 때, 호출한다.
	ssize_t read(struct file*, char * ,size_t,loff_t*): 응용 프로그램에서 장치 파일을 ssize_t read systemcall을 호출해서 읽을 때, 커널이 호출하는 함수이다. 즉 장치 파일을 읽을 때, 호출된다.					
  ssize_t read(struct file*,const char*,size_t,loff_t*): 응용 프로그램에서 장치 파일을 ssize_t write system call을 호출해서 쓸 때, 커널이 호출하는 함수이다. 즉 장치 파일에 쓸 때, 호출된다.
	gpio_get_value( gp_nr ) : gp_cr 의 핀을 읽어오는 함수입니다.

3.고찰
①과제 에 대한 고찰
 1번 과제에서 ‘A’ 상태 일 때 0.5초 주기로 3번 led가 깜빡 거리게 만들기 위해서 저는 main,c 코드에서 건들이지 않고 led_module.c 코드를 건들여야 한다고 생각을 했었습니다. 그래서 처음에 led_module.c의 코드를 분석을 하였습니다. 완벽하게 이 코드를 이해하지는 못해서 처음에 기본으로 주신 예제 코드를 분석을 해보았습니다. main.c에서 argv[1] ( 0 과 1의 값)을 write 하여 led_module.c에서 gpio_write 코드안에 msg로 전달 받아서 1이면 GPIO_SET(GPIO_NUM)을 사용하여 led를 키고 0이면 GPIO_CLR(GPIO_NUM)을 사용하여 led를 끕니다. 이렇게 분석을 해본 결과 굳이 led_module.c의 코드를 바꾸지 않고 main.c 의 코드를 바꿔도 된다고 생각을 했습니다. main.c 코드를 바꾸는 과정에서 A 또는 B를 선택하기 위한 값을 처음에 char* word = “ ”; 이렇게 설정을 했었습니다. 이렇게 설정하고 실행을 해보니 위에 실패화면처럼 세그멘테이션 오류가 떴습니다. 오류가 뜬 이유는 포인터를 쓸 때 메모리의 크기를 설정안했기 때문이라고 생각이 듭니다. 그래서 char word[100]을 사용했더니 세그멘테이션 오류가 안뜨고 잘 실행되었습니다. A를 구현하기 위해서 write 값을 0과 1을 주고 write 중간 마다 0.5초 쉬는 코드를 추가하였습니다. 그리고 이 전체코드를 3번 반복을 했습니다. 처음에 쉬는 코드를 추가할 때 sleep 코드 밖에 몰랐습니다. 구글링을 사용하여 찾아본 결과 sleep 은 자연수 초만 가능하였고 소수 초를 사용하기 위해서는 usleep을 사용하여야 했습니다. usleep(1)은 1/1000000초를 나타내기 때문에 0.5초를 나타내기 위해서 usleep(500000)을 사용했습니다. 그리고 B를 구현하기 위해서 또 다시 user에게 1을 할 것인지 아니면 0을 할 것인지 값을 받아서 1을 받으면 led 불이 켜지는 상태를 유지하게 하고 0을 받으면 led 불이 꺼지는 상태를 유지하게 했습니다. 예제 코드를 잘 분석해보니 1번 과제를 하기가 쉬었습니다. 다만 c의 기본 문법을 실수하여 세그멘테이션 오류가 떴습니다. 이 오류를 해결하는 데 시간을 더 많이 썼던 것 같습니다. 방학 기간 중에 c언어를 더욱 탄탄하게 만들도록 노력을 해야 할 것 같습니다. 
②과제에 대한 고찰
 1번 과제에서는 그저 main.c 부분 만 고치고 사용을 했었는데 2번 과제는 switch 라는 새로운 device가 들어와서 분석하기가 힘들었습니다. 처음에는 스위치가 눌려졌을 때 라즈베리파이로 새로운 신호가 들어온다고 생각을 했었습니다. 그래서 새로운 인자로 코드를 받아야 한다고 생각하여 앞이 너무 막막했습니다. 이렇게 고민을 하는 중 한찬호 교수님께서 스위치의 원리에 대해서 설명을 해주셨습니다. 스위치의 버튼이 눌려 졌을　때 신호를 스위치에서 신호를 주는 것이 아니고 스위치의 선이 연결을 끊거나 연결해준다는 것을 알게 되었습니다. 이러한 사실을 알고 스위치의 회로를 보니 gpio 21번이 연결 되어있었고 스위치를 누르고 뗄떼 마다 21번으로 신호를 보내는 거였습니다. 그리고 그 신호를 읽고 gpio 6번에게 신호를 보내서 led를 끄거나 led를 키게 하는 것이었습니다. 이 과제에 대해서 흐름을 읽었고 이제 구현만 하면 되었습니다. 그치만 switch를 누르거나 뗄 때 그 값을 어떻게 받는가에 대해서 문제가 생겼습니다. 그래서 네이버와 구글을 이용하여 찾아본 결과 <asm/gpio.h> gpio에 대한 헤더파일을 이용하는 것이 있었습니다. 이 헤더파일의 함수들 중에서 gpio_get_value() 함수를 사용을 했습니다. 21번의 신호를 받아서 switch가 on 되었는지 off 되었는지를 받고 그 값으로 6번에게 led on, off 의 신호를 주었습니다. 처음에 일단 스위치로 led를 제어하기 위해서 코드를 짜보았는데 어쩌다 보니 과제 2번의 2인 polling이 구현이 되었습니다. 동영상에서 마찬가지로 switch를 누르고 있으면 led가 켜지고 손을 떼면 led가 꺼지게 구현을 했습니다. 2번 과제를 포기 할까 생각을 했었는데 그다지 좋지 않은 기말성적을 받아서 과제 2번의 추가 점수가 3점밖에 되지 않지만 그래도 끝까지 해보았습니다. 저가 찾은 저 헤더파일이 없었다면 결코 성공할 수 없었을 겁니다. 이 과제 뿐만 아니라 다른 과제에서도 구글과 네이버에서의 정보가 없었다면 리눅스를 아예 모르는 저로써는 과제들을 끝낼 수 없었을 겁니다. 운영체제를 마치면서 성적은 좋지 않게 받았지만 그래도 저의 머릿속에 남는 것은 많다고 생각합니다. 유익한 강의가 되었습니다. 

4.프로그램 소스 파일
① 과제
***********led_module.c*************
#include <linux/module.h>
#include <linux/cdev.h>
#include <linux/uaccess.h>
#include <linux/fs.h>
#include <linux/io.h>

#define GPIO_BASE	0xfe200000
#define GPIO_SIZE	256
#define GPIO_SET(g)	(*(gpio+7)=1<<g)
#define GPIO_CLR(g)	(*(gpio+10)=1<<g)
#define GPIO_GET(g)	(*(gpio+13)&(1<<g))
#define GPIO_IN(g)	(*(gpio+((g)/10)) &=~(7<<(((g)%10)*3)))
#define GPIO_OUT(g)	(*(gpio+((g)/10)) |=(1<<(((g)%10)*3)))

#define GPIO_MAJOR	243
#define GPIO_MINOR	0
#define GPIO_DEVICE 	"ledtest"
#define GPIO_NUM	25

static int gpio_open(struct inode*, struct file*);
static int gpio_release(struct inode*, struct file*);
static ssize_t gpio_read(struct file*, char*, size_t, loff_t*);
static ssize_t gpio_write(struct file*, const char*, size_t, loff_t*);

volatile unsigned *gpio;
static char msg[BLOCK_SIZE] = {0};
struct cdev gpio_cdev;
static struct file_operations gpio_fop ={
	.owner = THIS_MODULE,
	.open=gpio_open, 
	.release=gpio_release,
	.read=gpio_read,
	.write=gpio_write, 
};

int start_module(void){
	unsigned int cnt=1;
	static void* map;
	int add;
	dev_t devno;
	
	printk(KERN_INFO "START MODULE\n");
	devno=MKDEV(GPIO_MAJOR, GPIO_MINOR);
	register_chrdev_region(devno, 1, GPIO_DEVICE);
	cdev_init(&gpio_cdev, &gpio_fop);
	gpio_cdev.owner = THIS_MODULE;
	
	add=cdev_add(&gpio_cdev, devno, cnt);
	map=ioremap(GPIO_BASE, GPIO_SIZE);
	gpio=(volatile unsigned int*)map;
	
	GPIO_IN(GPIO_NUM);
	GPIO_OUT(GPIO_NUM);
	
	return 0;
}

void end_module(void){
	dev_t devno = MKDEV(GPIO_MAJOR,GPIO_MINOR);
	unregister_chrdev_region(devno, 1);	
	cdev_del(&gpio_cdev);
	
	if(gpio)	
		iounmap(gpio);
	printk(KERN_INFO "END MODULE\n");
}
static int gpio_open(struct inode *inode, struct file *file){
	try_module_get(THIS_MODULE);
	printk("OPEN - gpio device\n");
	return 0;
}

static int gpio_release(struct inode* inode, struct file* file){
	module_put(THIS_MODULE);
	printk("CLOSE - gpio device\n");
	return 0;
}

static ssize_t gpio_read(struct file* file, char* buf, size_t len, loff_t* off){
	int cnt;
	cnt = copy_to_user(buf, msg, strlen(msg)+1);
	printk("GPIO device READ: %s \n", msg);
	return cnt;
}

static ssize_t gpio_write(struct file* file, const char* buf, size_t len, loff_t* off){
	short cnt;
	memset(msg, 0, BLOCK_SIZE);
	cnt = copy_from_user(msg, buf, len);
	(!strcmp(msg, "0")) ? GPIO_CLR(GPIO_NUM):GPIO_SET(GPIO_NUM);
	printk("gpio device WRITE: %s \n", msg);
	return cnt;
}

MODULE_LICENSE("GPL");
module_init(start_module);
module_exit(end_module);

*********main.c**********
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>

void main(int argc, char** argv){
	char buf[BUFSIZ];
	char i = 0;
	int fd = -1;
	char word[100]; //A 와 B 중 값을 받는다.
	char light[100]; // B 상태에서 led on -> 1 , led off -> 0의 값을 받는다.
	
	
	if((fd =open("/dev/ledtest", O_RDWR))<0){
			printf("open Fail \n");
			exit(-1);
		}
	printf("A or B ???\n"); 
	scanf("%s",word); 
	//A의 상태 일때
	if(strcmp(word,"A")==0){ 
		//3번 반복
		for(int i=0;i<3;i++){
				//led on
				write(fd, "1", strlen("1"), NULL);
				// 0.5초 쉬기
				usleep(500000);
				// led off
				write(fd, "0", strlen("0"), NULL);
				// 0.5초 쉬기
				usleep(500000);
				
			}
		}
	//B상태 일때
	else if(strcmp(word,"B")==0){
				printf("Light On?? -> 1\n Off?? -> 0\n");
				scanf("%s",light);
				//led on 일 때
				if(strcmp(light,"1")==0){
							write(fd, "1", strlen("1"), NULL);
						}
				//led off 일 때
				else if(strcmp(light,"0")==0){
							write(fd, "0", strlen("0"), NULL);
						}
		}
	//A와 B 가 아닐 때	
	else{
			printf("Wrong word!!!\n");
		}
	

	
	close(fd);
}
② 과제
*******led_module.c********
#include <linux/module.h>
#include <linux/cdev.h>
#include <linux/uaccess.h>
#include <linux/fs.h>
#include <linux/io.h>
//추가 되어진 gpio.h
#include <asm/gpio.h>

#define GPIO_BASE	0xfe200000
#define GPIO_SIZE	256
#define GPIO_SET(g)	(*(gpio+7)=1<<g)
#define GPIO_CLR(g)	(*(gpio+10)=1<<g)
#define GPIO_GET(g)	(*(gpio+13)&(1<<g))
#define GPIO_IN(g)	(*(gpio+((g)/10)) &=~(7<<(((g)%10)*3)))
#define GPIO_OUT(g)	(*(gpio+((g)/10)) |=(1<<(((g)%10)*3)))

#define GPIO_MAJOR	243
#define GPIO_MINOR	0
#define GPIO_DEVICE 	"ledtest“
// 6번과 21번 사용
#define GPIO_NUM	06
#define GPIO_NUM2	21

static int gpio_open(struct inode*, struct file*);
static int gpio_release(struct inode*, struct file*);
static ssize_t gpio_read(struct file*, char*, size_t, loff_t*);
static ssize_t gpio_write(struct file*, const char*, size_t, loff_t*);

volatile unsigned *gpio;
static char msg[BLOCK_SIZE] = {0};
struct cdev gpio_cdev;
static struct file_operations gpio_fop ={
	.owner = THIS_MODULE,
	.open=gpio_open, 
	.release=gpio_release,
	.read=gpio_read,
	.write=gpio_write, 
};

int start_module(void){
	unsigned int cnt=1;
	static void* map;
	int add;
	dev_t devno;
	
	printk(KERN_INFO "START MODULE\n");
	devno=MKDEV(GPIO_MAJOR, GPIO_MINOR);
	register_chrdev_region(devno, 1, GPIO_DEVICE);
	cdev_init(&gpio_cdev, &gpio_fop);
	gpio_cdev.owner = THIS_MODULE;
	
	add=cdev_add(&gpio_cdev, devno, cnt);
	map=ioremap(GPIO_BASE, GPIO_SIZE);
	gpio=(volatile unsigned int*)map;
	
	GPIO_IN(GPIO_NUM);
	GPIO_OUT(GPIO_NUM);
	
	return 0;
}

void end_module(void){
	dev_t devno = MKDEV(GPIO_MAJOR,GPIO_MINOR);
	unregister_chrdev_region(devno, 1);	
	cdev_del(&gpio_cdev);
	
	if(gpio)	
		iounmap(gpio);
	printk(KERN_INFO "END MODULE\n");
}
static int gpio_open(struct inode *inode, struct file *file){
	try_module_get(THIS_MODULE);
	printk("OPEN - gpio device\n");
	return 0;
}

static int gpio_release(struct inode* inode, struct file* file){
	module_put(THIS_MODULE);
	printk("CLOSE - gpio device\n");
	return 0;
}

static ssize_t gpio_read(struct file* file, char* buf, size_t len, loff_t* off){
	int cnt;
	cnt = copy_to_user(buf, msg, strlen(msg)+1);
	printk("GPIO device READ: %s \n", msg);
	return cnt;
}

static ssize_t gpio_write(struct file* file, const char* buf, size_t len, loff_t* off){
	short cnt;
	memset(msg, 0, BLOCK_SIZE);
	cnt = copy_from_user(msg, buf, len);
	//누르지 않을 때 21번 
	if(gpio_get_value(GPIO_NUM2)==1){
		//led off -> 6번 신호
		GPIO_CLR(GPIO_NUM);
		}
	//switch 누를 때 21번
	if(gpio_get_value(GPIO_NUM2)==0){
		//led on -> 6번 신호
		GPIO_SET(GPIO_NUM);
	} 
	printk("gpio device WRITE: %s \n", msg);
	return cnt;
}

MODULE_LICENSE("GPL");
module_init(start_module);
module_exit(end_module);

*********main.c***********
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>


void main(int argc, char** argv){
	char buf[BUFSIZ];
	char i;
	int fd = -1;
			fd =open("/dev/ledtest", O_RDWR);
			printf("fd: %d\n", fd);
			//무한 반복
			while(1){	
					//write
					write(fd, NULL, NULL, NULL);
					memset(buf, 0, BUFSIZ);
				}
	close(fd);
}




5.자료 출처
HW5_1 0.5초 쉬는 주기를 주기위한 코드 ->usleep
https://kin.naver.com/qna/detail.nhn?d1id=1&dirId=10302&docId=63937666&qb=dXNsZWVw&enc=utf8&section=kin&rank=2&search_sort=0&spq=0
HW5_2 switch 제어하기 위해서 찾은 헤더파일 -> <asm/gpio.h>
https://blog.naver.com/PostView.nhn?blogId=crushhh&logNo=221562780494&parentCategoryNo=&categoryNo=200&viewDate=&isShowPopularPosts=false&from=postView

