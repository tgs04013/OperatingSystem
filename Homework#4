Operating System HW4
2016116790 이 진우

1.개요

- 주소 공간에서 Heap 영역과 Stack 영역이 같은 공간에서 공존한다. Heap 영역은 malloc 동적 할당 하는 함수를 사용하여 메모리 공간을 차지하고 Stack 영역은 지역변수가 메모리 공간을 차지한다.
- Heap 영역을 할당하기 위해 malloc 함수를 사용하고 Stack을 할당하기 위해 Recursive function을 사용한다. 
- Heap 영역의 공간과 Stack 영역이 공존하는지 알기 위해서 메모리가 충돌하는지를 알아보자.



2.프로그램 구조 설명
	2.1 함수에 대한 설명
	void RecursiveRoutine(int) : Stack 영역의 공간을 사용하기 위해 지역변수를 메모리 공간에 저장하는 과정을 반복시키는 재귀함수
	char *commas(unsigned long amount) : Stack 영역의 지역변수가 할당받는 주소를 String형태로 나타내는 함수
	int prepend(char *buf, unsigned offset, char *new_str):  8자리 주소를 4자리씩 나눠서 반점으로 나누는 것을 추가하는 함수 
	int preprintf(char *buf,unsigned offst, char *format, ...) : 주소 값을 16진수로 한자리씩 문자형으로 추가해주기 위해서 사용하는 함수


3.고찰
이번 과제는 실제 프로그램 안에서 메모리를 사용하는 공간에 대해서 Stack 영역과 Heap 영역이 공간을 같이 사용하는 것에 대해서 확인하기였습니다. 강의시간에 교수님께서 설명하실 때 Stack의 한계를 보는 코드와 Heap의 한계를 코드를 사용해서 하면 쉽게 할 수 있을 것이다. 라고 말씀하셨는데 그래서 이번과제도 조금 쉬울 것 같다고 생각했습니다. 하지만 직접 해보니 잘못 생각 했구나 라고 느꼈습니다. 처음에 VM을 사용해서 교수님이 주신 코드를 실행시켜보았습니다. Heap 코드를 실행시켰을 때 malloc이 실패 하기 전에 계속 Segment fault가 일어났고 Stack 코드도 Segment fault가 일어났었습니다. 그래서 저는 저번 쓰레드 과제를 했을 때 같은 코드여도 vm만 이상하게 나오는걸 기억하여 바로 다시 라즈베리파이를 이용해서 돌려봤습니다. 라즈베리파이는 Heap 영역에서 malloc이 실패할 때 까지 segment fault가 나오지 않았고 깔끔하게 값이 나왔습니다. 하지만 Stack 영역에서는 여전히 158부터 Segment fault가 일어났습니다. 그래서 다른 애들한테 물어보았는데 강의시간에도 교수님 코드를 실행했을 때도 segment fault가 일어났다고 들었습니다. 그러므로 저는 158 반복을 끝으로 더 이상 stack영역을 사용할 수 없구나 생각하였고 바로 과제 코드를 만드는 것에 착수했습니다.
처음에 과제 코드를 만들 때 Recursive 함수를 같이 사용하면은 recursive 함수만 계속돌아가서 stack 영역만 차지 할 것 같아서 Recursive 함수안에 malloc을 집어넣어서 실행시켰습니다. 하지만 결과 값은 똑같이 158에 Segmentation fault가 나왔습니다. 이론상에는 malloc에 의해서 stack의 공간이 작아져야지 맞는데 그렇지 않은걸 확인하고 저는 lms로 조교님에게 물어보았습니다. 그래서 얻은 결과는 stack의 공간이 제한되어있어서 158 밖에 보이지 않았던 것 이었고 두 코드를 동시에 무한으로 돌리는 것이 아니고 한 코드는 유한하게 임의로 만든 후 다른 코드는 무한하게 돌리는거였습니다. 조교님의 피드백을 얻어서 지금의 코드를 만들었습니다. 저가 만든 코드는 재귀함수를 150번만 반복하여서 stack영역의 공간을 차지하고 나머지는 malloc 동적할당을 이용하여 메모리를 사용했습니다. 
 Heap 영역의 마지막 공간의 주소가 ‘BEEAC008’ 가 나왔고 Stack 영역의 마지막 공간의 주소가 ‘BE366C80’ 이 나왔습니다. 두 주소의 차이가 malloc함수가 할당하는 공간보다 작기 때문에 충돌이 일어났습니다. 
그리고 이코드를 사용하면서 생긴 의문이 있습니다. ppt를 보았을 때 Heap공간은 늘어날수록 주소값이 커져갔었습니다. 그치만 교수님이 주신 코드는 공간이 늘어날수록 주소값은 낮아졌습니다. 이러한 방향성은 중요하지 않은 것인지 궁금합니다. 이번과제는 실질적으로 코드를 생성하는 점은 복사와 붙여넣기 기능을 사용하여 얼마 걸리지 않았지만 이 코드를 이해하는데 많은 시간이 걸렸습니다. 다른 사람이 짜 놓은 코드가 정말 활용하기가 어렵겠구나 느꼈습니다. 그래서 저도 코드를 만들 때 주석을 간결하지만 정확하게 만들어야겠다라고 생각했습니다.


4.프로그램 소스 파일
*********test.c*************
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <stdarg.h>

#define   ONE_MEG   1048576
#define    STACK_ALLOC    ONE_MEG/20
#define BASE 16
#define GROUP 4
#define MAXTEXT 25
long       *MemoryPtr;	//동적할당 받은 변수
char address[32];	//Stack 영역 마지막 주소
// 함수
void     RecursiveRoutine( int );
char     *commas(unsigned long amount);
int prepend(char *, unsigned, char *);
int preprintf(char *, unsigned, char *, ...);
unsigned long    FirstStackLocation; //Stack 영역의 첫번째 주소
//main 함수 
int main(int argc, char *argv[]){

    long         NumberOfMegaBytes, NumberOfAllocations = 0;
    long         Temp;
    char         MemoryFunction[32];
    int        TopOfStack;
    int        Counter = 0;


   
    NumberOfMegaBytes = 100000; //malloc 동적할당 최대 메모리
    
    
 
    FirstStackLocation = (unsigned long)(&TopOfStack);
    printf("First location on stack: %s\n",
    commas( (unsigned long)FirstStackLocation  ) );
    RecursiveRoutine( 0 );	//Stack 영역 사용하는 재귀함수
                
    while (  NumberOfAllocations < NumberOfMegaBytes ) {
        MemoryPtr = ( long * ) malloc( ONE_MEG );	//Heap 영역 동적할당
        if ( MemoryPtr == 0 ) {	// 더이상 동적할당 못할 때
            printf( "The program is ending because we could allocate no more memory.\n");
            printf( "Total megabytes allocated = %ld\n", NumberOfAllocations );
            printf("Stack Ending Address : %s\n",address);
        free(MemoryPtr);	//동적 할당한 것 없애줌
            exit(0);	//종료
        }
        NumberOfAllocations++;	
        if ( ( NumberOfAllocations % 1 ) == 0 ) {   // 동적할당 할때마다 사용되는 주소 출력
			printf( "We have allocated %ld Megabytes				", NumberOfAllocations );
			printf( "Address %lX \n", MemoryPtr);
		}
    }    

   

}                    

void  RecursiveRoutine( int RecursiveDepth )
{
    char    Temp[ STACK_ALLOC ];
    char    StringTop[32];
    char    StringBottom[32];

    strcpy( StringTop,  commas( (unsigned long)(FirstStackLocation) ) );
    strcpy( StringBottom, commas( (unsigned long)&(Temp[STACK_ALLOC]) ) );
    printf("Iteration = %3d:  Stack Top/Bottom/Bytes: %s  %s  %ld\n",RecursiveDepth, StringTop, StringBottom,FirstStackLocation - (unsigned long)&(Temp[STACK_ALLOC])  );
    RecursiveDepth++;
  if(RecursiveDepth>150){//임의로 stack 영역 150번 할당
				strcpy(address,StringBottom);	//Stack영역 주소 복사
                return ;
            }
    RecursiveRoutine( RecursiveDepth );	//재귀 함수 반복
 
   
}
char *commas(unsigned long amount)
    {
    short i;
    short offset = MAXTEXT-1;   /* where the string "starts"  */
    short place;                /* the power of BASE for      */
                               /* current digit              */
   static char text[MAXTEXT];

    for ( i = 0; i < MAXTEXT; i++ )
       text[i] = '\0';
    
   /* Push digits right-to-left with commas */
   for (place = 0; amount > 0; ++place)
      {
      if (place % GROUP == 0 && place > 0)
         offset = prepend(text,offset,",");
        offset = preprintf(text,offset,"%X",amount % BASE);
          amount /= BASE;
   }   
    return (offset >= 0) ? text + offset : NULL;
}
int prepend(char *buf, unsigned offset, char *new_str)
    {
    int new_len = strlen(new_str);
    int new_start = offset - new_len;
    /* Push a string onto the front of another */
    if (new_start >= 0)
        memcpy(buf+new_start,new_str,new_len);
   
    /* Return new start position (negative if underflowed) */
    return new_start;
}
  
int preprintf(char *buf, unsigned offset, char *format, ...)
    {
   int pos = offset;
   char *temp1 = malloc(BUFSIZ);
   
  /* Format, then push */
    if (temp1)
        {
        va_list args;
       
       va_start(args,format);
       vsprintf(temp1,format,args);
        pos = prepend(buf,offset,temp1);
        va_end(args);
        free(temp1);
  }
   return pos;
}
*****Makefile******
test : test.o
	gcc -o test test.o
test.o: test.c
	gcc -c -o test.o test.c
clean:
	rm *.o test





 

